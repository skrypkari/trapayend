/**
 * –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –º–µ—Ä—á–∞–Ω—Ç–æ–≤
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ PAID –ø–ª–∞—Ç–µ–∂–µ–π —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
 * 2. –í—ã—á–∏—Ç–∞–µ—Ç –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã
 * 3. –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—è balance –∏ totalPaidOut –≤ —Ç–∞–±–ª–∏—Ü–µ shops
 * 
 * –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –≤ adminService.ts!
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç –≤ USDT (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
const CURRENCY_RATES = {
  'USD': 1.0,
  'EUR': 1.1,
  'GBP': 1.25,
  'RUB': 0.011,
  'USDT': 1.0,
  'BTC': 45000,
  'ETH': 2500,
  'LTC': 90,
  'DOGE': 0.08,
  'TRX': 0.08,
  'MATIC': 0.7,
  'USDC': 1.0,
};

function convertToUSDT(amount, currency) {
  const rate = CURRENCY_RATES[currency.toUpperCase()] || 1.0;
  return amount * rate;
}

async function migrateBalances() {
  console.log('üîÑ Starting balance migration...');
  console.log('üìä This will recalculate all merchant balances based on PAID payments with commission deduction');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã
    const shops = await prisma.shop.findMany({
      select: {
        id: true,
        name: true,
        username: true,
        balance: true,
        totalPaidOut: true,
        gatewaySettings: true,
      },
    });

    console.log(`üìã Found ${shops.length} shops to process`);

    let totalProcessed = 0;
    let totalBalanceAdjustment = 0;

    for (const shop of shops) {
      console.log(`\nüí∞ Processing shop: ${shop.username} (${shop.name})`);
      console.log(`   Current balance: ${shop.balance.toFixed(6)} USDT`);
      console.log(`   Current total paid out: ${shop.totalPaidOut.toFixed(6)} USDT`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PAID –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
      const paidPayments = await prisma.payment.findMany({
        where: {
          shopId: shop.id,
          status: 'PAID',
          gateway: { not: 'test_gateway' }, // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        },
        select: {
          id: true,
          amount: true,
          currency: true,
          amountUSDT: true,
          gateway: true,
          createdAt: true,
        },
      });

      console.log(`   üìä Found ${paidPayments.length} PAID payments`);

      // –†–∞–∑–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–π
      let gatewaySettings = {};
      if (shop.gatewaySettings) {
        try {
          gatewaySettings = JSON.parse(shop.gatewaySettings);
        } catch (error) {
          console.error(`   ‚ö†Ô∏è Error parsing gateway settings: ${error.message}`);
        }
      }

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞—Ç–µ–∂–µ–π —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
      let calculatedBalance = 0;
      const gatewayBreakdown = {};

      for (const payment of paidPayments) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USDT (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—É–º–º—É –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º)
        let amountUSDT = payment.amountUSDT;
        if (!amountUSDT) {
          amountUSDT = convertToUSDT(payment.amount, payment.currency);
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —à–ª—é–∑–∞
        let commission = 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%
        
        // –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–ª—é–∑–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        for (const [key, value] of Object.entries(gatewaySettings)) {
          if (key.toLowerCase() === payment.gateway.toLowerCase()) {
            commission = value.commission || 10;
            break;
          }
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏ (–∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –∏–¥—Ç–∏ –º–µ—Ä—á–∞–Ω—Ç—É)
        const merchantAmount = amountUSDT * (1 - commission / 100);
        calculatedBalance += merchantAmount;

        // –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (!gatewayBreakdown[payment.gateway]) {
          gatewayBreakdown[payment.gateway] = {
            count: 0,
            totalAmount: 0,
            totalMerchantAmount: 0,
            commission: commission,
          };
        }
        gatewayBreakdown[payment.gateway].count++;
        gatewayBreakdown[payment.gateway].totalAmount += amountUSDT;
        gatewayBreakdown[payment.gateway].totalMerchantAmount += merchantAmount;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
      const payouts = await prisma.payout.findMany({
        where: {
          shopId: shop.id,
          status: 'COMPLETED',
        },
        select: {
          amount: true,
          createdAt: true,
        },
      });

      const totalPayouts = payouts.reduce((sum, payout) => sum + payout.amount, 0);
      console.log(`   üí∏ Found ${payouts.length} completed payouts, total: ${totalPayouts.toFixed(6)} USDT`);

      // –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å = –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –ø–ª–∞—Ç–µ–∂–µ–π - –≤—ã–ø–ª–∞—á–µ–Ω–æ
      const finalBalance = calculatedBalance - totalPayouts;

      console.log(`   üìä Gateway breakdown:`);
      for (const [gateway, stats] of Object.entries(gatewayBreakdown)) {
        console.log(`     ${gateway}: ${stats.count} payments, ${stats.totalAmount.toFixed(2)} USDT gross, ${stats.totalMerchantAmount.toFixed(2)} USDT net (${stats.commission}% commission)`);
      }

      console.log(`   üßÆ Calculation summary:`);
      console.log(`     Earned from payments (after commission): ${calculatedBalance.toFixed(6)} USDT`);
      console.log(`     Total payouts: ${totalPayouts.toFixed(6)} USDT`);
      console.log(`     Final calculated balance: ${finalBalance.toFixed(6)} USDT`);

      const balanceAdjustment = finalBalance - shop.balance;
      totalBalanceAdjustment += Math.abs(balanceAdjustment);

      if (Math.abs(balanceAdjustment) > 0.01) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1 —Ü–µ–Ω—Ç–∞
        console.log(`   üîÑ Balance adjustment needed: ${balanceAdjustment > 0 ? '+' : ''}${balanceAdjustment.toFixed(6)} USDT`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ totalPaidOut
        await prisma.shop.update({
          where: { id: shop.id },
          data: {
            balance: Math.max(0, finalBalance), // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É
            totalPaidOut: totalPayouts,
          },
        });

        console.log(`   ‚úÖ Updated balance: ${shop.balance.toFixed(6)} -> ${Math.max(0, finalBalance).toFixed(6)} USDT`);
        console.log(`   ‚úÖ Updated totalPaidOut: ${shop.totalPaidOut.toFixed(6)} -> ${totalPayouts.toFixed(6)} USDT`);
      } else {
        console.log(`   ‚úÖ Balance is correct, no adjustment needed`);
      }

      totalProcessed++;
    }

    console.log(`\nüéâ Migration completed!`);
    console.log(`üìä Summary:`);
    console.log(`   Shops processed: ${totalProcessed}`);
    console.log(`   Total balance adjustments: ${totalBalanceAdjustment.toFixed(6)} USDT`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const finalStats = await prisma.shop.aggregate({
      _sum: {
        balance: true,
        totalPaidOut: true,
      },
      where: {
        status: 'ACTIVE',
      },
    });

    console.log(`üí∞ Final system totals:`);
    console.log(`   Total merchant balances: ${(finalStats._sum.balance || 0).toFixed(2)} USDT`);
    console.log(`   Total paid out: ${(finalStats._sum.totalPaidOut || 0).toFixed(2)} USDT`);

  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  migrateBalances()
    .then(() => {
      console.log('‚úÖ Migration script completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Migration script failed:', error);
      process.exit(1);
    });
}

module.exports = { migrateBalances };
