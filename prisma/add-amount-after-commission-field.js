/**
 * –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è amountAfterGatewayCommissionUSDT
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ amount_after_gateway_commission_usdt –≤ —Ç–∞–±–ª–∏—Ü—É payments
 * 2. –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ PAID –ø–ª–∞—Ç–µ–∂–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
 * 3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–ª—é–∑–æ–≤ –∏–∑ gatewaySettings –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
 * 
 * –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã Prisma!
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ —à–ª—é–∑–∞
function getGatewayCommission(gatewaySettings, gateway) {
  if (!gatewaySettings) return 10; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è 10%
  
  try {
    const settings = JSON.parse(gatewaySettings);
    
    // –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–ª—é–∑–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    for (const [key, value] of Object.entries(settings)) {
      if (key.toLowerCase() === gateway.toLowerCase()) {
        return value.commission || 10;
      }
    }
  } catch (error) {
    console.error(`Error parsing gateway settings:`, error);
  }
  
  return 10; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è 10%
}

async function migrateAmountAfterCommission() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è amountAfterGatewayCommissionUSDT...\n');

  try {
    // 1. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)
    console.log('üìã –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ amount_after_gateway_commission_usdt...');
    
    try {
      await prisma.$executeRaw`
        ALTER TABLE payments 
        ADD COLUMN IF NOT EXISTS amount_after_gateway_commission_usdt DECIMAL(20,8)
      `;
      console.log('‚úÖ –ü–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚ÑπÔ∏è  –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      } else {
        throw error;
      }
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PAID –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è
    console.log('\nüìä –ü–æ–ª—É—á–∞–µ–º PAID –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
    
    const paymentsToUpdate = await prisma.payment.findMany({
      where: {
        status: 'PAID',
        amountUSDT: { not: null },
        amountAfterGatewayCommissionUSDT: null
      },
      include: {
        shop: {
          select: {
            id: true,
            name: true,
            gatewaySettings: true
          }
        }
      },
      orderBy: {
        createdAt: 'asc'
      }
    });

    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${paymentsToUpdate.length} –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

    if (paymentsToUpdate.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂
    let updatedCount = 0;
    let totalOriginalAmount = 0;
    let totalAfterCommissionAmount = 0;

    for (const payment of paymentsToUpdate) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —à–ª—é–∑–∞
        const commission = getGatewayCommission(payment.shop.gatewaySettings, payment.gateway);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏
        const amountAfterCommission = payment.amountUSDT * (1 - commission / 100);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
        await prisma.payment.update({
          where: { id: payment.id },
          data: {
            amountAfterGatewayCommissionUSDT: amountAfterCommission
          }
        });

        totalOriginalAmount += payment.amountUSDT;
        totalAfterCommissionAmount += amountAfterCommission;
        updatedCount++;

        console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ ${payment.id}: ${payment.amountUSDT.toFixed(6)} USDT -> ${amountAfterCommission.toFixed(6)} USDT (–∫–æ–º–∏—Å—Å–∏—è ${commission}%, —à–ª—é–∑ ${payment.gateway})`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–ª–∞—Ç–µ–∂–µ–π
        if (updatedCount % 100 === 0) {
          console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount}/${paymentsToUpdate.length} –ø–ª–∞—Ç–µ–∂–µ–π...`);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ ${payment.id}:`, error.message);
      }
    }

    // 4. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${updatedCount}`);
    console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ –∫–æ–º–∏—Å—Å–∏–∏: ${totalOriginalAmount.toFixed(6)} USDT`);
    console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏: ${totalAfterCommissionAmount.toFixed(6)} USDT`);
    console.log(`üí∏ –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π: ${(totalOriginalAmount - totalAfterCommissionAmount).toFixed(6)} USDT`);
    console.log(`üìà –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è: ${((1 - totalAfterCommissionAmount / totalOriginalAmount) * 100).toFixed(2)}%`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
async function main() {
  try {
    await migrateAmountAfterCommission();
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('\nüí• –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { migrateAmountAfterCommission };
