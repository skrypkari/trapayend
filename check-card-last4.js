// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 4 —Ü–∏—Ñ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è MasterCard –∏ Amer –ø–ª–∞—Ç–µ–∂–µ–π
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkCardLast4() {
  try {
    console.log('üîç Checking cardLast4 field in payments...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—é cardLast4
    const totalPayments = await prisma.payment.count();
    const paymentsWithCardLast4 = await prisma.payment.count({
      where: {
        cardLast4: {
          not: null
        }
      }
    });
    
    console.log(`üìä Total payments: ${totalPayments}`);
    console.log(`üìä Payments with cardLast4: ${paymentsWithCardLast4}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —à–ª—é–∑–∞–º MasterCard –∏ Amer
    const mastercardPayments = await prisma.payment.findMany({
      where: {
        gateway: 'mastercard'
      },
      select: {
        id: true,
        gateway: true,
        status: true,
        cardLast4: true,
        paymentMethod: true,
        createdAt: true
      },
      take: 10
    });
    
    console.log(`\nüè¶ MasterCard payments (last 10):`);
    mastercardPayments.forEach(payment => {
      console.log(`   ${payment.id}: status=${payment.status}, cardLast4=${payment.cardLast4 || 'null'}, method=${payment.paymentMethod || 'null'}`);
    });
    
    const amerPayments = await prisma.payment.findMany({
      where: {
        gateway: 'amer'
      },
      select: {
        id: true,
        gateway: true,
        status: true,
        cardLast4: true,
        paymentMethod: true,
        createdAt: true
      },
      take: 10
    });
    
    console.log(`\nüè¶ Amer payments (last 10):`);
    amerPayments.forEach(payment => {
      console.log(`   ${payment.id}: status=${payment.status}, cardLast4=${payment.cardLast4 || 'null'}, method=${payment.paymentMethod || 'null'}`);
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –±–µ–∑ cardLast4
    const paidWithoutCardLast4 = await prisma.payment.findMany({
      where: {
        status: 'PAID',
        gateway: {
          in: ['mastercard', 'amer']
        },
        cardLast4: null
      },
      select: {
        id: true,
        gateway: true,
        status: true,
        cardLast4: true,
        paymentMethod: true,
        paidAt: true
      },
      take: 5
    });
    
    console.log(`\n‚ö†Ô∏è PAID payments without cardLast4 (${paidWithoutCardLast4.length} found):`);
    paidWithoutCardLast4.forEach(payment => {
      console.log(`   ${payment.id}: gateway=${payment.gateway}, paidAt=${payment.paidAt}`);
    });
    
    await prisma.$disconnect();
    
  } catch (error) {
    console.error('‚ùå Error checking cardLast4:', error);
    await prisma.$disconnect();
    process.exit(1);
  }
}

checkCardLast4();
