import prisma from '../config/database';
import { PlisioService } from './gateways/plisioService';
import { RapydService } from './gateways/rapydService';
import { NodaService } from './gateways/nodaService';
import { CoinToPayService } from './gateways/coinToPayService';
import { CoinToPay2Service } from './gateways/coinToPay2Service';
import { KlymeService } from './gateways/klymeService';
import { MasterCardService } from './gateways/mastercardService';
import { AmerService } from './gateways/amerService';
import { telegramBotService } from './telegramBotService';
import { currencyService } from './currencyService';
import { loggerService } from './loggerService';

export class WebhookService {
  private plisioService: PlisioService;
  private rapydService: RapydService;
  private nodaService: NodaService;
  private coinToPayService: CoinToPayService;
  private coinToPay2Service: CoinToPay2Service;
  private klymeService: KlymeService;
  private masterCardService: MasterCardService;
  private amerService: AmerService;

  constructor() {
    this.plisioService = new PlisioService();
    this.rapydService = new RapydService();
    this.nodaService = new NodaService();
    this.coinToPayService = new CoinToPayService();
    this.coinToPay2Service = new CoinToPay2Service();
    this.klymeService = new KlymeService();
    this.masterCardService = new MasterCardService();
    this.amerService = new AmerService();
  }

  // ‚úÖ –ù–û–í–û–ï: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–æ–º
  private async updatePaymentStatus(
    paymentId: string,
    newStatus: string,
    additionalData?: {
      failureMessage?: string;
      txUrls?: string[];
      cardLast4?: string;
      paymentMethod?: string;
      bankId?: string;
      remitterIban?: string;
      remitterName?: string;
      chargebackAmount?: number;
    }
  ): Promise<void> {
    console.log(`üîÑ updatePaymentStatus called: paymentId=${paymentId}, newStatus=${newStatus}`);
    console.log(`üîÑ Additional data:`, additionalData);

    await prisma.$transaction(async (tx) => {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞—Ç–µ–∂ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–≥–∞–∑–∏–Ω–µ
      const currentPayment = await tx.payment.findUnique({
        where: { id: paymentId },
        include: {
          shop: {
            select: {
              id: true,
              name: true,
              username: true,
              balance: true,
              totalPaidOut: true,
              settings: {
                select: {
                  webhookUrl: true,
                  webhookEvents: true,
                },
              },
            },
          },
        },
      });

      if (!currentPayment) {
        throw new Error(`Payment ${paymentId} not found`);
      }

      const oldStatus = currentPayment.status;
      const shop = currentPayment.shop;

      console.log(`üí∞ Payment ${paymentId}: ${oldStatus} -> ${newStatus}`);
      console.log(`üè™ Shop ${shop.username} current balance: ${shop.balance} USDT`);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
      const paymentUpdateData: any = {
        status: newStatus.toUpperCase(),
        updatedAt: new Date(),
        statusChangedBy: 'system',
        statusChangedAt: new Date(),
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (additionalData?.failureMessage) {
        paymentUpdateData.failureMessage = additionalData.failureMessage;
      }
      if (additionalData?.txUrls) {
        paymentUpdateData.txUrls = JSON.stringify(additionalData.txUrls);
      }
      if (additionalData?.cardLast4) {
        paymentUpdateData.cardLast4 = additionalData.cardLast4;
      }
      if (additionalData?.paymentMethod) {
        paymentUpdateData.paymentMethod = additionalData.paymentMethod;
      }
      if (additionalData?.bankId) {
        paymentUpdateData.bankId = additionalData.bankId;
      }
      if (additionalData?.remitterIban) {
        paymentUpdateData.remitterIban = additionalData.remitterIban;
      }
      if (additionalData?.remitterName) {
        paymentUpdateData.remitterName = additionalData.remitterName;
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–∞–≥–∞–∑–∏–Ω–∞
      let newBalance = shop.balance;
      let balanceChangeReason = '';

      // ‚úÖ –õ–û–ì–ò–ö–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–ú
      
      // 1. –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è PAID (–∏ —Ä–∞–Ω—å—à–µ –Ω–µ –±—ã–ª PAID)
      if (newStatus.toUpperCase() === 'PAID' && oldStatus !== 'PAID') {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ USDT
        const amountUSDT = await currencyService.convertToUSDT(
          currentPayment.amount,
          currentPayment.currency
        );

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é —à–ª—é–∑–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        const gatewayCommission = await this.getGatewayCommission(shop.id, currentPayment.gateway);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ —à–ª—é–∑–∞ (—Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏—Ç –º–µ—Ä—á–∞–Ω—Ç)
        const amountAfterGatewayCommissionUSDT = amountUSDT * (1 - gatewayCommission / 100);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫ –±–∞–ª–∞–Ω—Å—É —Å—É–º–º—É –ü–û–°–õ–ï –≤—ã—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
        newBalance += amountAfterGatewayCommissionUSDT;
        balanceChangeReason = `+${amountAfterGatewayCommissionUSDT.toFixed(6)} USDT (payment became PAID, after ${gatewayCommission}% gateway commission)`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–µ —Å—É–º–º—ã –≤ –ø–ª–∞—Ç–µ–∂–µ
        paymentUpdateData.amountUSDT = amountUSDT;
        paymentUpdateData.amountAfterGatewayCommissionUSDT = amountAfterGatewayCommissionUSDT;
        paymentUpdateData.paidAt = new Date();

        console.log(`üí∞ Converting ${currentPayment.amount} ${currentPayment.currency} -> ${amountUSDT.toFixed(6)} USDT`);
        console.log(`üí∞ Gateway ${currentPayment.gateway} commission: ${gatewayCommission}%`);
        console.log(`üí∞ Amount after gateway commission: ${amountAfterGatewayCommissionUSDT.toFixed(6)} USDT`);
        console.log(`üí∞ Adding to balance: ${shop.balance} + ${amountAfterGatewayCommissionUSDT.toFixed(6)} = ${newBalance.toFixed(6)} USDT`);
      }

      // 2. –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –±—ã–ª PAID –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ-PAID
      else if (oldStatus === 'PAID' && newStatus.toUpperCase() !== 'PAID') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º amountAfterGatewayCommissionUSDT –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞, –∏–Ω–∞—á–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
        let amountToRemove: number;
        
        if ((currentPayment as any).amountAfterGatewayCommissionUSDT) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
          amountToRemove = (currentPayment as any).amountAfterGatewayCommissionUSDT;
        } else if (currentPayment.amountUSDT) {
          // –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –ø–æ–ª–µ –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
          const gatewayCommission = await this.getGatewayCommission(shop.id, currentPayment.gateway);
          amountToRemove = currentPayment.amountUSDT * (1 - gatewayCommission / 100);
        } else {
          console.log('No amountUSDT found for payment, nothing to remove from balance');
          amountToRemove = 0;
        }
        
        if (amountToRemove > 0) {
          // –í—ã—á–∏—Ç–∞–µ–º –∏–∑ –±–∞–ª–∞–Ω—Å–∞ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –º–µ—Ä—á–∞–Ω—Ç –ø–æ–ª—É—á–∏–ª (–ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏)
          newBalance -= amountToRemove;
          balanceChangeReason = `-${amountToRemove.toFixed(6)} USDT (payment no longer PAID)`;

          // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
          paymentUpdateData.amountUSDT = null;
          paymentUpdateData.amountAfterGatewayCommissionUSDT = null;
          paymentUpdateData.paidAt = null;

          console.log(`üí∞ Removing from balance: ${shop.balance} - ${amountToRemove.toFixed(6)} = ${newBalance.toFixed(6)} USDT`);
        }
      }

      // 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CHARGEBACK
      if (newStatus.toUpperCase() === 'CHARGEBACK') {
        const chargebackAmount = additionalData?.chargebackAmount || 0;
        
        if (chargebackAmount > 0) {
          newBalance -= chargebackAmount;
          balanceChangeReason += ` and -${chargebackAmount.toFixed(6)} USDT (chargeback penalty)`;
          paymentUpdateData.chargebackAmount = chargebackAmount;

          console.log(`üí∏ Additional chargeback penalty: -${chargebackAmount.toFixed(6)} USDT`);
          console.log(`üí∞ Final balance after chargeback: ${newBalance.toFixed(6)} USDT`);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
      const updatedPayment = await tx.payment.update({
        where: { id: paymentId },
        data: paymentUpdateData,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –º–∞–≥–∞–∑–∏–Ω–∞ (–µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è)
      if (newBalance !== shop.balance) {
        await tx.shop.update({
          where: { id: shop.id },
          data: { balance: newBalance },
        });

        console.log(`‚úÖ Shop ${shop.username} balance updated: ${shop.balance.toFixed(6)} -> ${newBalance.toFixed(6)} USDT`);
        console.log(`üìù Reason: ${balanceChangeReason}`);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      await tx.webhookLog.create({
        data: {
          paymentId: paymentId,
          shopId: shop.id,
          event: `webhook_status_change_${newStatus.toLowerCase()}`,
          statusCode: 200,
          responseBody: JSON.stringify({
            oldStatus,
            newStatus: newStatus.toUpperCase(),
            balanceChange: balanceChangeReason || 'no balance change',
            oldBalance: shop.balance,
            newBalance: newBalance,
            amountUSDT: paymentUpdateData.amountUSDT,
            additionalData,
            timestamp: new Date().toISOString(),
          }),
        },
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –º–µ—Ä—á–∞–Ω—Ç—É
      await this.sendShopWebhook(
        { ...currentPayment, ...updatedPayment, shop },
        newStatus.toUpperCase()
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await this.sendPaymentStatusNotification(
        { ...currentPayment, ...updatedPayment },
        newStatus.toUpperCase()
      );

      // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —Å—Ç–∞—Ç—É—Å payment link –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ webhook
      if (oldStatus !== 'PAID' && newStatus.toUpperCase() === 'PAID') {
        console.log(`üìà Payment ${paymentId} became PAID via webhook, updating payment link counter`);
        console.log(`üìà Payment details: oldStatus="${oldStatus}", newStatus="${newStatus.toUpperCase()}", paymentLinkId="${currentPayment.paymentLinkId}"`);
        
        // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ payment link –≤ —Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (currentPayment.paymentLinkId) {
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é payment link
            const paymentLink = await tx.paymentLink.findUnique({
              where: { id: currentPayment.paymentLinkId },
              select: { 
                id: true, 
                type: true, 
                currentPayments: true, 
                status: true 
              },
            });

            if (paymentLink) {
              console.log(`üìà Found payment link ${paymentLink.id}: type=${paymentLink.type}, currentPayments=${paymentLink.currentPayments}, status=${paymentLink.status}`);

              // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
              const newCurrentPayments = paymentLink.currentPayments + 1;
              
              // –î–ª—è SINGLE —Å—Å—ã–ª–æ–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å COMPLETED
              const newLinkStatus = (paymentLink.type === 'SINGLE') ? 'COMPLETED' : paymentLink.status;

              await tx.paymentLink.update({
                where: { id: currentPayment.paymentLinkId },
                data: {
                  currentPayments: newCurrentPayments,
                  status: newLinkStatus,
                  updatedAt: new Date(),
                },
              });

              console.log(`‚úÖ Payment link ${paymentLink.id} updated: currentPayments=${paymentLink.currentPayments} -> ${newCurrentPayments}, status=${paymentLink.status} -> ${newLinkStatus}`);
            } else {
              console.log(`‚ùå Payment link ${currentPayment.paymentLinkId} not found`);
            }
          } catch (linkError) {
            console.error('‚ùå Failed to update payment link counter:', linkError);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          }
        } else {
          console.log(`üìà Payment ${paymentId} is not linked to a payment link`);
        }
      } else {
        console.log(`üìà Payment ${paymentId} status change does not trigger payment link counter update: ${oldStatus} -> ${newStatus.toUpperCase()}`);
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Plisio
  async processPlisioWebhook(webhookData: any): Promise<void> {
    console.log('üîÑ Processing Plisio webhook:', webhookData);

    try {
      const result = await this.plisioService.processWebhook(webhookData);
      
      if (!result.paymentId) {
        throw new Error('No payment ID in Plisio webhook');
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –ø–æ gatewayOrderId
      const payment = await prisma.payment.findFirst({
        where: { gatewayOrderId: result.paymentId },
      });

      if (!payment) {
        console.error(`Payment not found for Plisio webhook: ${result.paymentId}`);
        return;
      }

      console.log(`üìä Plisio webhook: Payment ${payment.id} status ${result.status}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await this.updatePaymentStatus(payment.id, result.status, {
        txUrls: result.txUrls,
      });

      loggerService.logWebhookProcessed(
        'plisio',
        payment.id,
        payment.status,
        result.status,
        webhookData
      );

    } catch (error) {
      console.error('Error processing Plisio webhook:', error);
      loggerService.logWebhookError('plisio', error, webhookData);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Plisio Gateway
  async processPlisioGatewayWebhook(webhookData: any): Promise<void> {
    console.log('üîÑ Processing Plisio Gateway webhook:', webhookData);

    try {
      const result = await this.plisioService.processWebhook(webhookData);
      
      if (!result.paymentId) {
        throw new Error('No payment ID in Plisio Gateway webhook');
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –ø–æ gatewayOrderId
      const payment = await prisma.payment.findFirst({
        where: { gatewayOrderId: result.paymentId },
      });

      if (!payment) {
        console.error(`Payment not found for Plisio Gateway webhook: ${result.paymentId}`);
        return;
      }

      console.log(`üìä Plisio Gateway webhook: Payment ${payment.id} status ${result.status}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await this.updatePaymentStatus(payment.id, result.status, {
        txUrls: result.txUrls,
      });

      loggerService.logWebhookProcessed(
        'plisio_gateway',
        payment.id,
        payment.status,
        result.status,
        webhookData
      );

    } catch (error) {
      console.error('Error processing Plisio Gateway webhook:', error);
      loggerService.logWebhookError('plisio_gateway', error, webhookData);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Rapyd
  async processRapydWebhook(webhookData: any): Promise<void> {
    console.log('üîÑ Processing Rapyd webhook:', webhookData);

    try {
      const result = await this.rapydService.processWebhook(webhookData);
      
      if (!result.paymentId) {
        throw new Error('No payment ID in Rapyd webhook');
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –ø–æ gatewayOrderId
      const payment = await prisma.payment.findFirst({
        where: { gatewayOrderId: result.paymentId },
      });

      if (!payment) {
        console.error(`Payment not found for Rapyd webhook: ${result.paymentId}`);
        return;
      }

      console.log(`üìä Rapyd webhook: Payment ${payment.id} status ${result.status}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await this.updatePaymentStatus(payment.id, result.status, {
        failureMessage: result.failureMessage,
        cardLast4: result.additionalInfo?.cardLast4,
        paymentMethod: result.additionalInfo?.paymentMethod,
      });

      loggerService.logWebhookProcessed(
        'rapyd',
        payment.id,
        payment.status,
        result.status,
        webhookData
      );

    } catch (error) {
      console.error('Error processing Rapyd webhook:', error);
      loggerService.logWebhookError('rapyd', error, webhookData);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Noda
  async processNodaWebhook(webhookData: any): Promise<void> {
    console.log('üîÑ Processing Noda webhook:', webhookData);

    try {
      const result = await this.nodaService.processWebhook(webhookData);
      
      if (!result.paymentId) {
        throw new Error('No payment ID in Noda webhook');
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –ø–æ gatewayOrderId
      const payment = await prisma.payment.findFirst({
        where: { gatewayOrderId: result.paymentId },
      });

      if (!payment) {
        console.error(`Payment not found for Noda webhook: ${result.paymentId}`);
        return;
      }

      console.log(`üìä Noda webhook: Payment ${payment.id} status ${result.status}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await this.updatePaymentStatus(payment.id, result.status, {
        bankId: result.additionalInfo?.bankId,
        remitterIban: result.additionalInfo?.remitterIban,
        remitterName: result.additionalInfo?.remitterName,
      });

      loggerService.logWebhookProcessed(
        'noda',
        payment.id,
        payment.status,
        result.status,
        webhookData
      );

    } catch (error) {
      console.error('Error processing Noda webhook:', error);
      loggerService.logWebhookError('noda', error, webhookData);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç CoinToPay
  async processCoinToPayWebhook(webhookData: any): Promise<void> {
    console.log('üîÑ Processing CoinToPay webhook:', webhookData);

    try {
      const result = await this.coinToPayService.processWebhook(webhookData);
      
      if (!result.paymentId) {
        throw new Error('No payment ID in CoinToPay webhook');
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –ø–æ gatewayOrderId
      const payment = await prisma.payment.findFirst({
        where: { gatewayOrderId: result.paymentId },
      });

      if (!payment) {
        console.error(`Payment not found for CoinToPay webhook: ${result.paymentId}`);
        return;
      }

      console.log(`üìä CoinToPay webhook: Payment ${payment.id} status ${result.status}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      await this.updatePaymentStatus(payment.id, result.status);

      loggerService.logWebhookProcessed(
        'cointopay',
        payment.id,
        payment.status,
        result.status,
        webhookData
      );

    } catch (error) {
      console.error('Error processing CoinToPay webhook:', error);
      loggerService.logWebhookError('cointopay', error, webhookData);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç CoinToPay2
  async processCoinToPay2Webhook(webhookData: any): Promise<void> {
    console.log('üîÑ Processing CoinToPay2 webhook:', webhookData);

    try {
      const result = await this.coinToPay2Service.processWebhook(webhookData);
      
      if (!result.paymentId) {
        throw new Error('No payment ID in CoinToPay2 webhook');
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –ø–æ gatewayOrderId
      const payment = await prisma.payment.findFirst({
        where: { gatewayOrderId: result.paymentId },
      });

      if (!payment) {
        console.error(`Payment not found for CoinToPay2 webhook: ${result.paymentId}`);
        return;
      }

      console.log(`üìä CoinToPay2 webhook: Payment ${payment.id} status ${result.status}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      await this.updatePaymentStatus(payment.id, result.status);

      loggerService.logWebhookProcessed(
        'cointopay2',
        payment.id,
        payment.status,
        result.status,
        webhookData
      );

    } catch (error) {
      console.error('Error processing CoinToPay2 webhook:', error);
      loggerService.logWebhookError('cointopay2', error, webhookData);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç KLYME
  async processKlymeWebhook(webhookData: any): Promise<void> {
    console.log('üîÑ Processing KLYME webhook:', webhookData);

    try {
      const result = await this.klymeService.processWebhook(webhookData);
      
      if (!result.paymentId) {
        throw new Error('No payment ID in KLYME webhook');
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –ø–æ gatewayOrderId
      const payment = await prisma.payment.findFirst({
        where: { gatewayOrderId: result.paymentId },
      });

      if (!payment) {
        console.error(`Payment not found for KLYME webhook: ${result.paymentId}`);
        return;
      }

      console.log(`üìä KLYME webhook: Payment ${payment.id} status ${result.status}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await this.updatePaymentStatus(payment.id, result.status, {
        paymentMethod: result.additionalInfo?.payment_method,
      });

      loggerService.logWebhookProcessed(
        'klyme',
        payment.id,
        payment.status,
        result.status,
        webhookData
      );

    } catch (error) {
      console.error('Error processing KLYME webhook:', error);
      loggerService.logWebhookError('klyme', error, webhookData);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç MasterCard
  async processMasterCardWebhook(webhookData: any): Promise<void> {
    console.log('üîÑ Processing MasterCard webhook:', JSON.stringify(webhookData, null, 2));

    try {
      const result = await this.masterCardService.processWebhook(webhookData);
      
      console.log(`üìä MasterCard webhook result:`, result);
      
      if (!result.paymentId) {
        console.error('‚ùå No payment ID extracted from MasterCard webhook data');
        console.error('‚ùå Available webhook fields:', Object.keys(webhookData));
        throw new Error('No payment ID in MasterCard webhook');
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è MasterCard webhook –∏—â–µ–º –ø–ª–∞—Ç–µ–∂ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º
      // MasterCard –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å payment_id (–Ω–∞—à gatewayPaymentId) –∏–ª–∏ order_id
      let payment = null;
      
      console.log(`üîç MasterCard webhook: Searching for payment with ID: ${result.paymentId}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ gatewayPaymentId (–µ—Å–ª–∏ –≤ webhook –ø—Ä–∏—à–µ–ª payment_id)
      if (result.paymentId) {
        console.log(`üîç Trying to find MasterCard payment by various fields...`);
        
        payment = await prisma.payment.findFirst({
          where: {
            AND: [
              { gateway: 'mastercard' },
              {
                OR: [
                  { gatewayPaymentId: result.paymentId },
                  { gatewayOrderId: result.paymentId },
                  { id: result.paymentId },
                  { orderId: result.paymentId },
                ],
              },
            ],
          },
        });
        
        console.log(`üîç Search result: ${payment ? `Found payment ${payment.id}` : 'Payment not found'}`);
      }

      if (!payment) {
        console.error(`‚ùå Payment not found for MasterCard webhook with ID: ${result.paymentId}`);
        console.error(`üîç Searched by: gatewayOrderId="${result.paymentId}", id="${result.paymentId}", orderId="${result.paymentId}"`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å gateway = 'mastercard' –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const allMasterCardPayments = await prisma.payment.findMany({
          where: { gateway: 'mastercard' },
          select: { 
            id: true, 
            gatewayOrderId: true, 
            gatewayPaymentId: true, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –í–∫–ª—é—á–∞–µ–º gatewayPaymentId –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            orderId: true, 
            status: true 
          },
          take: 10,
        });
        console.log(`üîç Available MasterCard payments for debugging:`, allMasterCardPayments);
        
        return;
      }

      console.log(`‚úÖ Found payment ${payment.id} for MasterCard webhook, updating status from ${payment.status} to ${result.status}`);

      // ‚úÖ –ù–û–í–û–ï: –î–ª—è MasterCard webhook –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º cardLast4, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      // cardLast4 —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ paymentController
      await this.updatePaymentStatus(payment.id, result.status);

      loggerService.logWebhookProcessed(
        'mastercard',
        payment.id,
        payment.status,
        result.status,
        webhookData
      );

    } catch (error) {
      console.error('‚ùå Error processing MasterCard webhook:', error);
      loggerService.logWebhookError('mastercard', error, webhookData);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Amer
  async processAmerWebhook(webhookData: any): Promise<void> {
    console.log('üîÑ Processing Amer webhook:', JSON.stringify(webhookData, null, 2));

    try {
      const result = await this.amerService.processWebhook(webhookData);
      
      console.log(`üìä Amer webhook result:`, result);
      
      if (!result.paymentId) {
        console.error('‚ùå No payment ID extracted from Amer webhook data');
        console.error('‚ùå Available webhook fields:', Object.keys(webhookData));
        throw new Error('No payment ID in Amer webhook');
      }

      // –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º –¥–ª—è Amer
      let payment = null;
      
      console.log(`üîç Amer webhook: Searching for payment with ID: ${result.paymentId}`);
      
      payment = await prisma.payment.findFirst({
        where: {
          AND: [
            { gateway: 'amer' },
            {
              OR: [
                { gatewayPaymentId: result.paymentId },
                { gatewayOrderId: result.paymentId },
                { id: result.paymentId },
                { orderId: result.paymentId },
              ],
            },
          ],
        },
      });
      
      console.log(`üîç Search result: ${payment ? `Found payment ${payment.id}` : 'Payment not found'}`);

      if (!payment) {
        console.error(`‚ùå Payment not found for Amer webhook with ID: ${result.paymentId}`);
        return;
      }

      console.log(`üìä Amer webhook: Payment ${payment.id} status ${result.status}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      await this.updatePaymentStatus(payment.id, result.status, {
        cardLast4: result.additionalInfo?.cardLast4,
        paymentMethod: result.additionalInfo?.paymentMethod
      });

    } catch (error) {
      console.error('‚ùå Error processing Amer webhook:', error);
      loggerService.logWebhookError('amer', error, webhookData);
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook –º–µ—Ä—á–∞–Ω—Ç—É
  private async sendShopWebhook(payment: any, status: string): Promise<void> {
    const startTime = Date.now();
    
    try {
      const shop = payment.shop;
      const settings = shop.settings;

      if (!settings?.webhookUrl) {
        console.log(`No webhook URL configured for shop ${shop.id}`);
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
      const eventName = status === 'PAID' ? 'payment.success' : 
                       status === 'FAILED' ? 'payment.failed' : 
                       status === 'EXPIRED' ? 'payment.failed' : 
                       status === 'CHARGEBACK' ? 'payment.failed' :
                       status === 'REFUND' ? 'payment.failed' :
                       'payment.pending';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
      let webhookEvents: string[] = [];
      if (settings.webhookEvents) {
        try {
          webhookEvents = Array.isArray(settings.webhookEvents) 
            ? settings.webhookEvents 
            : JSON.parse(settings.webhookEvents as string);
        } catch (error) {
          console.error('Error parsing webhook events:', error);
          webhookEvents = [];
        }
      }

      if (!webhookEvents.includes(eventName)) {
        console.log(`Webhook event ${eventName} not enabled for shop ${shop.id}`);
        return;
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload –¥–ª—è webhook
      const webhookPayload = {
        event: eventName,
        payment: {
          id: payment.id,
          order_id: payment.orderId,
          gateway_order_id: payment.gatewayOrderId,
          gateway: payment.gateway,
          amount: payment.amount,
          currency: payment.currency,
          status: status.toLowerCase(),
          customer_email: payment.customerEmail,
          customer_name: payment.customerName,
          failure_message: payment.failureMessage,
          tx_urls: payment.txUrls ? JSON.parse(payment.txUrls) : null,
          created_at: payment.createdAt,
          updated_at: payment.updatedAt,
        },
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook
      const response = await fetch(settings.webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'TesSoft Payment System/1.0',
        },
        body: JSON.stringify(webhookPayload),
      });

      const responseTime = Date.now() - startTime;
      const responseText = response.ok ? 'Success' : await response.text();

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É webhook
      loggerService.logShopWebhookSent(
        payment.shopId,
        settings.webhookUrl,
        eventName,
        response.status,
        responseTime,
        webhookPayload
      );

      console.log(`üì§ Shop webhook sent to ${settings.webhookUrl} with status ${response.status} (${responseTime}ms)`);

    } catch (error) {
      console.error('Failed to send shop webhook:', error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É webhook
      loggerService.logShopWebhookError(
        payment.shopId,
        payment.shop?.settings?.webhookUrl || 'unknown',
        'webhook_send',
        error,
        {}
      );
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private async sendPaymentStatusNotification(payment: any, status: string): Promise<void> {
    try {
      const statusMap: Record<string, 'created' | 'paid' | 'failed' | 'expired' | 'refund' | 'chargeback' | 'processing'> = {
        'PENDING': 'created',
        'PROCESSING': 'processing',
        'PAID': 'paid',
        'FAILED': 'failed',
        'EXPIRED': 'expired',
        'REFUND': 'refund',
        'CHARGEBACK': 'chargeback',
      };

      const telegramStatus = statusMap[status];
      if (!telegramStatus || telegramStatus === 'created') return;

      await telegramBotService.sendPaymentNotification(payment.shopId, payment, telegramStatus);
    } catch (error) {
      console.error('Failed to send Telegram payment notification:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ —à–ª—é–∑–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
  private async getGatewayCommission(shopId: string, gatewayName: string): Promise<number> {
    try {
      const shop = await prisma.shop.findUnique({
        where: { id: shopId },
        select: { gatewaySettings: true },
      });

      if (!shop?.gatewaySettings) {
        console.log(`No gateway settings found for shop ${shopId}, using default commission 10%`);
        return 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%
      }

      const gatewaySettings = JSON.parse(shop.gatewaySettings);
      
      // –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–ª—é–∑–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
      for (const [key, value] of Object.entries(gatewaySettings)) {
        if (key.toLowerCase() === gatewayName.toLowerCase()) {
          const commission = (value as any).commission || 10;
          console.log(`Gateway ${gatewayName} commission for shop ${shopId}: ${commission}%`);
          return commission;
        }
      }

      console.log(`No specific commission found for gateway ${gatewayName} in shop ${shopId}, using default 10%`);
      return 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%
    } catch (error) {
      console.error(`Error getting gateway commission for shop ${shopId}, gateway ${gatewayName}:`, error);
      return 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%
    }
  }
}