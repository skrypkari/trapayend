// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ payment links
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixPaymentLinkStatuses() {
  try {
    console.log('üîß Starting payment link status fix...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ payment links —Ç–∏–ø–∞ SINGLE –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å ACTIVE
    const singleLinks = await prisma.paymentLink.findMany({
      where: {
        type: 'SINGLE',
        status: 'ACTIVE'
      },
      include: {
        payments: {
          where: {
            status: 'PAID'
          }
        }
      }
    });
    
    console.log(`üìä Found ${singleLinks.length} SINGLE payment links with ACTIVE status`);
    
    let updatedCount = 0;
    
    for (const link of singleLinks) {
      const paidPayments = link.payments.filter(p => p.status === 'PAID');
      
      console.log(`\nüìã Processing payment link ${link.id}:`);
      console.log(`   - Type: ${link.type}`);
      console.log(`   - Current status: ${link.status}`);
      console.log(`   - Current payments counter: ${link.currentPayments}`);
      console.log(`   - Actual paid payments: ${paidPayments.length}`);
      
      if (paidPayments.length > 0) {
        // –î–ª—è SINGLE —Å—Å—ã–ª–æ–∫ —Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å COMPLETED
        await prisma.paymentLink.update({
          where: { id: link.id },
          data: {
            status: 'COMPLETED',
            currentPayments: paidPayments.length,
            updatedAt: new Date()
          }
        });
        
        console.log(`   ‚úÖ Updated: status=COMPLETED, currentPayments=${paidPayments.length}`);
        updatedCount++;
      } else {
        console.log(`   ‚ÑπÔ∏è  No paid payments, keeping ACTIVE status`);
      }
    }
    
    console.log(`\n‚úÖ Payment link status fix completed!`);
    console.log(`üìä Updated ${updatedCount} payment links`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const completedLinks = await prisma.paymentLink.count({
      where: {
        type: 'SINGLE',
        status: 'COMPLETED'
      }
    });
    
    const activeLinks = await prisma.paymentLink.count({
      where: {
        type: 'SINGLE',
        status: 'ACTIVE'
      }
    });
    
    console.log(`\nüìà Final statistics:`);
    console.log(`   - SINGLE links with COMPLETED status: ${completedLinks}`);
    console.log(`   - SINGLE links with ACTIVE status: ${activeLinks}`);
    
    await prisma.$disconnect();
    
  } catch (error) {
    console.error('‚ùå Error fixing payment link statuses:', error);
    await prisma.$disconnect();
    process.exit(1);
  }
}

fixPaymentLinkStatuses();
